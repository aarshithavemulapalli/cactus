Question,result_column
Calculate the Molecular Weight of the smiles: CCCCNC(=O)N1C2=CC=CC=C2N=C1NC(=O)OC,290.13789043599996 Dalton
Calculate the Molecular Weight of the smiles: CC1=CN=C(S1)NC(=O)C2=C(C3=CC=CC=C3S(=O)(=O)N2C)O,351.034747896 Dalton
Calculate the Molecular Weight of the smiles: C(C1C2C(C(C(O1)OC3C(OC(C(C3O)O)OC4C(OC(C(C4O)O)OC5C(OC(C(C5O)O)OC6C(OC(C(C6O)O)OC7C(OC(C(C7O)O)OC8C(OC(O2)C(C8O)O)CO)CO)CO)CO)CO)CO)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcExactMolWt(NoneType)
did not match C++ signature:
    CalcExactMolWt(RDKit::ROMol mol, bool onlyHeavy=False)"
Calculate the Molecular Weight of the smiles: CC(=O)CCC(=O)O,116.047344116 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCC(CC=CCCCCCCCC(=O)O)O,298.25079494799996 Dalton
Calculate the Molecular Weight of the smiles: CC1=C(C=CC=C1C2=CC=CC=C2)COC(=O)C3C(C3(C)C)C=C(C(F)(F)F)Cl,422.126042284 Dalton
Calculate the Molecular Weight of the smiles: CCC(C)(C)O,88.088815004 Dalton
Calculate the Molecular Weight of the smiles: CC1CCC(C(C1)O)C(C)C,156.15141526 Dalton
Calculate the Molecular Weight of the smiles: C1=CC=C2C(=C1)C=CC(=O)O2,146.036779432 Dalton
Calculate the Molecular Weight of the smiles: C(=O)(O)[O-].[Na+],83.982338172 Dalton
Calculate the Molecular Weight of the smiles: CCCC[Sn](CCCC)(Cl)Cl,303.980750636 Dalton
Calculate the Molecular Weight of the smiles: C(C(=O)O)C(CC(=O)O)(C(=O)O)O,192.02700259600002
Calculate the Molecular Weight of the smiles: CCC(=O)[O-].[Na+],96.01872368000001 Dalton
Calculate the Molecular Weight of the smiles: CN1CCC23C4C(=O)CCC2(C1CC5=C3C(=C(C=C5)OC)O4)O,315.147058152 Dalton
Calculate the Molecular Weight of the smiles: CCCC=O,72.057514876 Dalton
Calculate the Molecular Weight of the smiles: CN(C)C(=S)SSC(=S)N(C)C,239.988332384 Dalton
Calculate the Molecular Weight of the smiles: CC(=O)OCC1=C(N2C(C(C2=O)NC(=O)CSC3=CC=NC=C3)SC1)C(=O)O,423.05587726399995
Calculate the Molecular Weight of the smiles: C(CC(=O)NC(CS)C(=O)NCC(=O)O)C(C(=O)O)N,307.08380626400003 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=CC=C1C(=O)O)N,137.047678464 Dalton
Calculate the Molecular Weight of the smiles: C(C(C(C(C=O)O)O)O)O,150.05282342 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCCCC=CCCCCCCCC(=O)O,282.255880328 Dalton
Calculate the Molecular Weight of the smiles: CC1C=CC=CCCC=CC=CC=CC=CC(CC2C(C(CC(O2)(CC(C(CCC(CC(CC(CC(=O)OC(C(C1O)C)C)O)O)O)O)O)O)O)C(=O)O)OC3C(C(C(C(O3)C)O)N)O,923.4878498760003
Calculate the Molecular Weight of the smiles: CC1C(C(C(C(O1)OC2CCC3(C4CCC5(C(CCC5(C4CCC3(C2)O)O)C6=CC(=O)OC6)C)C=O)O)O)O,550.2777975439998 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCCC(=O)OC,158.130679816 Dalton
Calculate the Molecular Weight of the smiles: C(C(=O)CO)O,90.031694052 Dalton
Calculate the Molecular Weight of the smiles: CC1=C(C(=O)CC1OC(=O)C2C(C2(C)C)C=C(C)C)CC=C,302.18819469199997 Dalton
Calculate the Molecular Weight of the smiles: COC1C(CC2CN3CCC4=C(C3CC2C1C(=O)OC)NC5=C4C=CC(=C5)OC)OC(=O)C6=CC(=C(C(=C6)OC)OC)OC,608.27338086 Dalton
Calculate the Molecular Weight of the smiles: C1=CC=C(C=C1)N,93.057849224 Dalton
Calculate the Molecular Weight of the smiles: CC12CCC3C(C1CCC2O)CCC4=CC(=O)CCC34,274.193280072 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=CC=C1[N+](=O)[O-])Cl,156.993056048 Dalton
Calculate the Molecular Weight of the smiles: CN(C)NC(=O)CCC(=O)O,The Molecular Weight of the smiles is 160.084792244 Dalton.
Calculate the Molecular Weight of the smiles: CCOC(=O)CC(CC(=O)OCC)(C(=O)OCC)O,276.12090298000004 Dalton
Calculate the Molecular Weight of the smiles: CC1=CC(=C(C(=C1)C(C)(C)C)O)C(C)(C)C,220.182715388 Dalton
Calculate the Molecular Weight of the smiles: CCC(C)CCCC(=O)NC(CCN)C(=O)NC(C(C)O)C(=O)NC(CCN)C(=O)NC1CCNC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC1=O)CCN)CC(C)C)CC(C)C)CCN)CCN)C(C)O,1254.813590072 Dalton
Calculate the Molecular Weight of the smiles: CC1=CC2C(C(C1=O)O)(C3(CC(C(C34CO4)O2)O)C)CO,296.12598836 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCCCC=O,142.135765196 Dalton
Calculate the Molecular Weight of the smiles: C1CCNC(C1)C2=CN=CC=C2,162.115698448 Dalton
Calculate the Molecular Weight of the smiles: CC1(C(C1C(=O)OC(C#N)C2=CC(=CC=C2)OC3=CC=CC=C3)C=C(Br)Br)C,502.97316766800003 Dalton
Calculate the Molecular Weight of the smiles: CC=C(C1=CC=C(C=C1)O)C(=CC)C2=CC=C(C=C2)O,266.130679816 Dalton
Calculate the Molecular Weight of the smiles: CNCC(C1=CC(=C(C=C1)O)O)O,183.089543276 Dalton
Calculate the Molecular Weight of the smiles: C1CC(NC1)C(=O)O,115.063328528 Dalton
Calculate the Molecular Weight of the smiles: C(C(=CC(=O)O)C(=O)O)C(=O)O,174.01643791200001 Dalton
Calculate the Molecular Weight of the smiles: C1=CC=C2C(=C1)NC=N2,118.053098192 Dalton
Calculate the Molecular Weight of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,530.1487607360001 Dalton
Calculate the Molecular Weight of the smiles: CC1CC2C3CCC4=CC(=O)C=CC4(C3(C(CC2(C1(C(=O)CO)O)C)O)F)C,392.19990224799994 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=CC=C1C(=O)O)C(=O)O,166.026608672 Dalton
Calculate the Molecular Weight of the smiles: C1=C(N=C(S1)N=C(N)N)CSCCC(=NS(=O)(=O)N)N,337.04493572 Dalton
Calculate the Molecular Weight of the smiles: C=CC(=O)O,72.021129368 Dalton
Calculate the Molecular Weight of the smiles: CC(C)C(C(=O)O)N,117.078978592 Dalton
Calculate the Molecular Weight of the smiles: COC1=CC=CC=C1O,124.052429496 Dalton
Calculate the Molecular Weight of the smiles: C1CNCCN1,86.08439831999999 Dalton
Calculate the Molecular Weight of the smiles: C1CCNCC1,85.08914935199999 Dalton
Calculate the Molecular Weight of the smiles: CC(=O)OC,74.036779432 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCCCCCCCCCCC(=O)OCC=C(C)C=CC=C(C)C=CC1=C(CCCC1(C)C)C,524.45933116 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=C(C=C1F)F)C(CN2C=NC=N2)(CN3C=NC=N3)O,306.10406544399996 Dalton
Calculate the Molecular Weight of the smiles: CCCCS,90.05032132 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=C(C=C1C(CN)O)O)O,169.073893212 Dalton
Calculate the Molecular Weight of the smiles: C(CO)N(CCO)CCO,149.10519334 Dalton
Calculate the Molecular Weight of the smiles: CC(=CCCC(=CCCC(=CCO)C)C)C,222.198365452 Dalton
Calculate the Molecular Weight of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,530.1487607360001 Dalton
Calculate the Molecular Weight of the smiles: CN(C)C=O,73.052763844 Dalton
Calculate the Molecular Weight of the smiles: CC1=CC(=NN1C(=O)N(C)C)OC(=O)N(C)C,240.122240372 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=C(C=C1Cl)Cl)OCC(=O)O,219.969399412 Dalton
Calculate the Molecular Weight of the smiles: C1CCC(CC1)(C2=CC=CC=C2)N3CCCCC3,243.19869979999999 Dalton
Calculate the Molecular Weight of the smiles: CC1=C(C=CC(=C1)OP(=S)(OC)OC)SC,278.02002297 Dalton
Calculate the Molecular Weight of the smiles: COC1=CC(=CC(=C1OC)OC)C2C3C(COC3=O)C(C4=CC5=C(C=C24)OCO5)O,414.13146766399996 Dalton
Calculate the Molecular Weight of the smiles: CCC1=C(C(=NC(=N1)N)N)C2=CC=C(C=C2)Cl,248.08287409599998 Dalton
Calculate the Molecular Weight of the smiles: CSCCC=O,104.029585876 Dalton
Calculate the Molecular Weight of the smiles: CNC(=O)CSP(=O)(OC)OC,213.022465494 Dalton
Calculate the Molecular Weight of the smiles: CC1C(C(CC(O1)OC2C(C(C(OC2OC3=C4C=C5C=C3OC6=C(C=C(C=C6)C(C(C(=O)NC(C(=O)NC5C(=O)NC7C8=CC(=C(C=C8)O)C9=C(C=C(C=C9O)O)C(NC(=O)C(C(C1=CC(=C(O4)C=C1)Cl)O)NC7=O)C(=O)O)CC(=O)N)NC(=O)C(CC(C)C)NC)O)Cl)CO)O)O)(C)N)O,1447.4301996399995 Dalton
Calculate the Molecular Weight of the smiles: CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C,536.438201792 Dalton
Calculate the Molecular Weight of the smiles: CC1=CCCC(=C)C2CC(C2CC1)(C)C,204.187800768 Dalton
Calculate the Molecular Weight of the smiles: CCC1C(C=C(C=CC(=O)C(CC(C(C(C(CC(=O)O1)O)C)OC2C(C(C(C(O2)C)OC3CC(C(C(O3)C)O)(C)O)N(C)C)O)CC=O)C)C)COC4C(C(C(C(O4)C)O)OC)OC,915.5191500040002 Dalton
Calculate the Molecular Weight of the smiles: C(=C(Cl)Cl)Cl,129.914383072 Dalton
Calculate the Molecular Weight of the smiles: C1=CC=C(C=C1)CC(C(=O)O)N,165.078978592 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCC=C,112.12520051199999 Dalton
Calculate the Molecular Weight of the smiles: CCCC1=NC2=C(N1CC3=CC=C(C=C3)C4=CC=CC=C4C(=O)O)C=C(C=C2C)C5=NC6=CC=CC=C6N5C,514.2368762 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCCCCCCCCCCC(=O)OC,270.255880328 Dalton
Calculate the Molecular Weight of the smiles: CC(C)(C)C(CCC1=CC=C(C=C1)Cl)(CN2C=NC=N2)O,307.145140004 Dalton
Calculate the Molecular Weight of the smiles: CCCCC,72.093900384 Dalton
Calculate the Molecular Weight of the smiles: C1=C(C=C(C(=C1O)O)O)C(=O)OC2=CC(=CC(=C2O)O)C(=O)OCC3C(C(C(C(O3)OC(=O)C4=CC(=C(C(=C4)OC(=O)C5=CC(=C(C(=C5)O)O)O)O)O)OC(=O)C6=CC(=C(C(=C6)OC(=O)C7=CC(=C(C(=C7)O)O)O)O)O)OC(=O)C8=CC(=C(C(=C8)OC(=O)C9=CC(=C(C(=C9)O)O)O)O)O)OC(=O)C1=CC(=C(C(=C1)OC(=O)C1=CC(=C(C(=C1)O)O)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcExactMolWt(NoneType)
did not match C++ signature:
    CalcExactMolWt(RDKit::ROMol mol, bool onlyHeavy=False)"
Calculate the Molecular Weight of the smiles: CCN(CC)CCOC(=O)C1=CC=C(C=C1)N,236.15247788 Dalton
Calculate the Molecular Weight of the smiles: C1CCN(CC1)C(=O)C=CC=CC2=CC3=C(C=C2)OCO3,285.136493468 Dalton
Calculate the Molecular Weight of the smiles: CC(=O)N(C)C,87.068413908 Dalton
Calculate the Molecular Weight of the smiles: C1=CC=C2C(=C1)C(=C(C(=O)O2)CC3=C(C4=CC=CC=C4OC3=O)O)O,336.0633881039999 Dalton
Calculate the Molecular Weight of the smiles: CC(=CCCC(C)(C=C)OC(=O)C)C,196.14632988 Dalton
Calculate the Molecular Weight of the smiles: CCCCCCCCCC(=O)O,172.14632988 Dalton
Calculate the Molecular Weight of the smiles: C(I)(I)I,393.721244032 Dalton
Calculate the Molecular Weight of the smiles: CC1C(C(C(O1)OC2C(C(C(C(C2O)O)N=C(N)N)O)N=C(N)N)OC3C(C(C(C(O3)CO)O)O)NC)(C=O)O,581.265669688 Dalton
Calculate the Molecular Weight of the smiles: CC=O,44.026214748 Dalton
Calculate the Molecular Weight of the smiles: CC12CC(=O)C3C(C1CCC2(C(=O)CO)O)CCC4=CC(=O)C=CC34C,358.178023932 Dalton
Calculate the Molecular Weight of the smiles: CC12C3CCC(C1(C(=O)OC2=O)C)O3,196.073558864 Dalton
Calculate the Molecular Weight of the smiles: CCC=C,56.062600255999996 Dalton
Calculate the Molecular Weight of the smiles: C(=S)=S,75.944142 Dalton
Calculate the Molecular Weight of the smiles: C(CS)O,78.013935812 Dalton
Calculate the Molecular Weight of the smiles: CC(CCC=C(C)C)CCO,156.15141526 Dalton
Calculate the Molecular Weight of the smiles: C1=CC(=C2C(=C1)OC(O2)(F)F)C3=CNC=C3C#N,248.039733872 Dalton
Calculate the Molecular Weight of the smiles: C1=CC=C2C(=C1)C=CC=C2O,144.057514876 Dalton
Calculate the Molecular Weight of the smiles: CN1C2CCC1C(C(C2)OC(=O)C3=CC=CC=C3)C(=O)OC,303.147058152 Dalton
Calculate the Molecular Weight of the smiles: C1CCC(CC1)N,99.10479941599999 Dalton
Calculate the QED of the smiles: CCCCNC(=O)N1C2=CC=CC=C2N=C1NC(=O)OC,0.847401444528972
Calculate the QED of the smiles: CC1=CN=C(S1)NC(=O)C2=C(C3=CC=CC=C3S(=O)(=O)N2C)O,0.8613672076779287
Calculate the QED of the smiles: C(C1C2C(C(C(O1)OC3C(OC(C(C3O)O)OC4C(OC(C(C4O)O)OC5C(OC(C(C5O)O)OC6C(OC(C(C6O)O)OC7C(OC(C(C7O)O)OC8C(OC(O2)C(C8O)O)CO)CO)CO)CO)CO)CO)O)O)O,Error: You need to provide a mol argument.
Calculate the QED of the smiles: CC(=O)CCC(=O)O,0.5816626924315285
Calculate the QED of the smiles: CCCCCCC(CC=CCCCCCCCC(=O)O)O,0.3272779695688504
Calculate the QED of the smiles: CC1=C(C=CC=C1C2=CC=CC=C2)COC(=O)C3C(C3(C)C)C=C(C(F)(F)F)Cl,0.5032490235011318
Calculate the QED of the smiles: CCC(C)(C)O,0.5097634659284825
Calculate the QED of the smiles: CC1CCC(C(C1)O)C(C)C,0.6179494584335713
Calculate the QED of the smiles: C1=CC=C2C(=C1)C=CC(=O)O2,0.5302216682110639
Calculate the QED of the smiles: C(=O)(O)[O-].[Na+],0.30327610731514837
Calculate the QED of the smiles: CCCC[Sn](CCCC)(Cl)Cl,0.6335275735440196
Calculate the QED of the smiles: C(C(=O)O)C(CC(=O)O)(C(=O)O)O,0.4274213512497735
Calculate the QED of the smiles: CCC(=O)[O-].[Na+],0.3134658838124572
Calculate the QED of the smiles: CN1CCC23C4C(=O)CCC2(C1CC5=C3C(=C(C=C5)OC)O4)O,0.839282607029206
Calculate the QED of the smiles: CCCC=O,0.4443450475833798
Calculate the QED of the smiles: CN(C)C(=S)SSC(=S)N(C)C,0.46886077125428943
Calculate the QED of the smiles: CC(=O)OCC1=C(N2C(C(C2=O)NC(=O)CSC3=CC=NC=C3)SC1)C(=O)O,0.36563982763097236
Calculate the QED of the smiles: C(CC(=O)NC(CS)C(=O)NCC(=O)O)C(C(=O)O)N,0.26343729334807475
Calculate the QED of the smiles: C1=CC(=CC=C1C(=O)O)N,0.566589187245288
Calculate the QED of the smiles: C(C(C(C(C=O)O)O)O)O,0.3258384035161684
Calculate the QED of the smiles: CCCCCCCCC=CCCCCCCCC(=O)O,0.2905169417988814
Calculate the QED of the smiles: CC1C=CC=CCCC=CC=CC=CC=CC(CC2C(C(CC(O2)(CC(C(CCC(CC(CC(CC(=O)OC(C(C1O)C)C)O)O)O)O)O)O)O)C(=O)O)OC3C(C(C(C(O3)C)O)N)O,Agent stopped due to iteration limit or time limit.
Calculate the QED of the smiles: CC1C(C(C(C(O1)OC2CCC3(C4CCC5(C(CCC5(C4CCC3(C2)O)O)C6=CC(=O)OC6)C)C=O)O)O)O,0.19602903796216445
Calculate the QED of the smiles: CCCCCCCC(=O)OC,0.4383150695699537
Calculate the QED of the smiles: C(C(=O)CO)O,0.4353852085134311
Calculate the QED of the smiles: CC1=C(C(=O)CC1OC(=O)C2C(C2(C)C)C=C(C)C)CC=C,0.5692267993614908
Calculate the QED of the smiles: COC1C(CC2CN3CCC4=C(C3CC2C1C(=O)OC)NC5=C4C=CC(=C5)OC)OC(=O)C6=CC(=C(C(=C6)OC)OC)OC,0.3735666920618681
Calculate the QED of the smiles: C1=CC=C(C=C1)N,0.48007546344555985
Calculate the QED of the smiles: CC12CCC3C(C1CCC2O)CCC4=CC(=O)CCC34,0.733928635563028
Calculate the QED of the smiles: C1=CC(=CC=C1[N+](=O)[O-])Cl,0.46360210314198946
Calculate the QED of the smiles: CN(C)NC(=O)CCC(=O)O,0.5409408843832045
Calculate the QED of the smiles: CCOC(=O)CC(CC(=O)OCC)(C(=O)OCC)O,0.49859625509607547
Calculate the QED of the smiles: CC1=CC(=C(C(=C1)C(C)(C)C)O)C(C)(C)C,0.6909972184662643
Calculate the QED of the smiles: CCC(C)CCCC(=O)NC(CCN)C(=O)NC(C(C)O)C(=O)NC(CCN)C(=O)NC1CCNC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC1=O)CCN)CC(C)C)CC(C)C)CCN)CCN)C(C)O,0.029758170518942553
Calculate the QED of the smiles: CC1=CC2C(C(C1=O)O)(C3(CC(C(C34CO4)O2)O)C)CO,0.5458309652959041
Calculate the QED of the smiles: CCCCCCCCC=O,0.3943168373689603
Calculate the QED of the smiles: C1CCNC(C1)C2=CN=CC=C2,0.6818149785973887
Calculate the QED of the smiles: CC1(C(C1C(=O)OC(C#N)C2=CC(=CC=C2)OC3=CC=CC=C3)C=C(Br)Br)C,0.4215663731784319
Calculate the QED of the smiles: CC=C(C1=CC=C(C=C1)O)C(=CC)C2=CC=C(C=C2)O,0.7966718656376948
Calculate the QED of the smiles: CNCC(C1=CC(=C(C=C1)O)O)O,0.5101568892419974
Calculate the QED of the smiles: C1CC(NC1)C(=O)O,0.4982089208893278
Calculate the QED of the smiles: C(C(=CC(=O)O)C(=O)O)C(=O)O,0.4976684796992808
Calculate the QED of the smiles: C1=CC=C2C(=C1)NC=N2,0.5583728365871126
Calculate the QED of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,0.45541449702144693
Calculate the QED of the smiles: CC1CC2C3CCC4=CC(=O)C=CC4(C3(C(CC2(C1(C(=O)CO)O)C)O)F)C,0.6672134969921051
Calculate the QED of the smiles: C1=CC(=CC=C1C(=O)O)C(=O)O,0.688908808436835
Calculate the QED of the smiles: C1=C(N=C(S1)N=C(N)N)CSCCC(=NS(=O)(=O)N)N,0.28661243847385526
Calculate the QED of the smiles: C=CC(=O)O,0.4508580596042506
Calculate the QED of the smiles: CC(C)C(C(=O)O)N,0.5369765717084767
Calculate the QED of the smiles: COC1=CC=CC=C1O,0.6127725486570803
Calculate the QED of the smiles: C1CNCCN1,0.4022372466625182
Calculate the QED of the smiles: C1CCNCC1,0.4576362279207808
Calculate the QED of the smiles: CC(=O)OC,0.38296659073251405
Calculate the QED of the smiles: CCCCCCCCCCCCCCCC(=O)OCC=C(C)C=CC=C(C)C=CC1=C(CCCC1(C)C)C,0.08987434515285701
Calculate the QED of the smiles: C1=CC(=C(C=C1F)F)C(CN2C=NC=N2)(CN3C=NC=N3)O,0.7515159753061997
Calculate the QED of the smiles: CCCCS,0.49025297206668045
Calculate the QED of the smiles: C1=CC(=C(C=C1C(CN)O)O)O,0.4724272074622585
Calculate the QED of the smiles: C(CO)N(CCO)CCO,0.419530358360434
Calculate the QED of the smiles: CC(=CCCC(=CCCC(=CCO)C)C)C,0.6330301643827799
Calculate the QED of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,0.45541449702144693
Calculate the QED of the smiles: CN(C)C=O,0.3902682398861675
Calculate the QED of the smiles: CC1=CC(=NN1C(=O)N(C)C)OC(=O)N(C)C,0.7271671448939994
Calculate the QED of the smiles: C1=CC(=C(C=C1Cl)Cl)OCC(=O)O,0.85199274417323
Calculate the QED of the smiles: C1CCC(CC1)(C2=CC=CC=C2)N3CCCCC3,0.7469327757845524
Calculate the QED of the smiles: CC1=C(C=CC(=C1)OP(=S)(OC)OC)SC,"0.6056546156883094

Question: Calculate the TPSA of the smiles: C1=CC(=C(C1)C(=O)O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(="
Calculate the QED of the smiles: COC1=CC(=CC(=C1OC)OC)C2C3C(COC3=O)C(C4=CC5=C(C=C24)OCO5)O,0.7629173210900769
Calculate the QED of the smiles: CCC1=C(C(=NC(=N1)N)N)C2=CC=C(C=C2)Cl,0.856137149346395
Calculate the QED of the smiles: CSCCC=O,0.3912828365702852
Calculate the QED of the smiles: CNC(=O)CSP(=O)(OC)OC,0.6861794924550499
Calculate the QED of the smiles: CC1C(C(CC(O1)OC2C(C(C(OC2OC3=C4C=C5C=C3OC6=C(C=C(C=C6)C(C(C(=O)NC(C(=O)NC5C(=O)NC7C8=CC(=C(C=C8)O)C9=C(C=C(C=C9O)O)C(NC(=O)C(C(C1=CC(=C(O4)C=C1)Cl)O)NC7=O)C(=O)O)CC(=O)N)NC(=O)C(CC(C)C)NC)O)Cl)CO)O)O)(C)N)O,0.07434800355531383
Calculate the QED of the smiles: CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C,0.24351270202197942
Calculate the QED of the smiles: CC1=CCCC(=C)C2CC(C2CC1)(C)C,0.5005620426274199
Calculate the QED of the smiles: CCC1C(C=C(C=CC(=O)C(CC(C(C(C(CC(=O)O1)O)C)OC2C(C(C(C(O2)C)OC3CC(C(C(O3)C)O)(C)O)N(C)C)O)CC=O)C)C)COC4C(C(C(C(O4)C)O)OC)OC,0.13088726197403125
Calculate the QED of the smiles: C(=C(Cl)Cl)Cl,0.47377505861481944
Calculate the QED of the smiles: C1=CC=C(C=C1)CC(C(=O)O)N,0.6904627990029388
Calculate the QED of the smiles: CCCCCCC=C,0.37835862251165964
Calculate the QED of the smiles: CCCC1=NC2=C(N1CC3=CC=C(C=C3)C4=CC=CC=C4C(=O)O)C=C(C=C2C)C5=NC6=CC=CC=C6N5C,0.243238592025165
Calculate the QED of the smiles: CCCCCCCCCCCCCCCC(=O)OC,0.30139776583567224
Calculate the QED of the smiles: CC(C)(C)C(CCC1=CC=C(C=C1)Cl)(CN2C=NC=N2)O,"0.92141338710529

Question: Calculate the TPSA of the smiles: C1=CC=C(C=C1)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)"
Calculate the QED of the smiles: CCCCC,0.4687855098011332
Calculate the QED of the smiles: C1=C(C=C(C(=C1O)O)O)C(=O)OC2=CC(=CC(=C2O)O)C(=O)OCC3C(C(C(C(O3)OC(=O)C4=CC(=C(C(=C4)OC(=O)C5=CC(=C(C(=C5)O)O)O)O)O)OC(=O)C6=CC(=C(C(=C6)OC(=O)C7=CC(=C(C(=C7)O)O)O)O)O)OC(=O)C8=CC(=C(C(=C8)OC(=O)C9=CC(=C(C(=C9)O)O)O)O)O)OC(=O)C1=CC(=C(C(=C1)OC(=O)C1=CC(=C(C(=C1)O)O)O)O)O,Error: You need to provide a mol argument.
Calculate the QED of the smiles: CCN(CC)CCOC(=O)C1=CC=C(C=C1)N,0.6038456847188672
Calculate the QED of the smiles: C1CCN(CC1)C(=O)C=CC=CC2=CC3=C(C=C2)OCO3,0.632788302073214
Calculate the QED of the smiles: CC(=O)N(C)C,0.40990688283686294
Calculate the QED of the smiles: C1=CC=C2C(=C1)C(=C(C(=O)O2)CC3=C(C4=CC=CC=C4OC3=O)O)O,0.5459100356936089
Calculate the QED of the smiles: CC(=CCCC(C)(C=C)OC(=O)C)C,0.4981507139283784
Calculate the QED of the smiles: CCCCCCCCCC(=O)O,0.570683149963468
Calculate the QED of the smiles: C(I)(I)I,0.43826332672952517
Calculate the QED of the smiles: CC1C(C(C(O1)OC2C(C(C(C(C2O)O)N=C(N)N)O)N=C(N)N)OC3C(C(C(C(O3)CO)O)O)NC)(C=O)O,0.06824479508490591
Calculate the QED of the smiles: CC=O,0.35500761339323206
Calculate the QED of the smiles: CC12CC(=O)C3C(C1CCC2(C(=O)CO)O)CCC4=CC(=O)C=CC34C,0.7848332802556961
Calculate the QED of the smiles: CC12C3CCC(C1(C(=O)OC2=O)C)O3,0.42124595946297344
Calculate the QED of the smiles: CCC=C,0.39998668920534597
Calculate the QED of the smiles: C(=S)=S,0.3949540667862806
Calculate the QED of the smiles: C(CS)O,0.4198536028422452
Calculate the QED of the smiles: CC(CCC=C(C)C)CCO,0.6067463726043822
Calculate the QED of the smiles: C1=CC(=C2C(=C1)OC(O2)(F)F)C3=CNC=C3C#N,0.8436434384722771
Calculate the QED of the smiles: C1=CC=C2C(=C1)C=CC=C2O,0.6020160700037418
Calculate the QED of the smiles: CN1C2CCC1C(C(C2)OC(=O)C3=CC=CC=C3)C(=O)OC,0.7979361284429697
Calculate the QED of the smiles: C1CCC(CC1)N,0.4860844589993981
Calculate the Synthetic Accessibility of the smiles: CCCCNC(=O)N1C2=CC=CC=C2N=C1NC(=O)OC,2.306021195399575
Calculate the Synthetic Accessibility of the smiles: CC1=CN=C(S1)NC(=O)C2=C(C3=CC=CC=C3S(=O)(=O)N2C)O,"2.6621529597870204

Question: Calculate the LogP of the smiles: C1=CC=C(C=C1)C2=CC=C(C=C2)C3=CC=C(C=C3)C4=CC=C(C=C4)C5=CC=C(C=C5)C6=CC=C(C=C6)C7=CC=C(C=C7)C8=CC=C(C=C8)C9=CC=C(C=C9)C10=CC=C(C=C10)C11=CC=C(C=C11)C12=CC=C(C=C12)C13=CC=C(C=C13)C14=CC=C(C=C14)C15=CC=C(C=C15)C16=CC=C(C=C16)C17=CC=C(C=C17)C18=CC=C(C=C18)C19=CC=C(C=C19)C20=CC=C(C=C20)C21=CC=C(C=C21)C22=CC=C(C=C22)C23=CC=C(C=C23)C24=CC=C(C=C24)C25=CC=C(C=C25)C26=CC=C(C=C26)C27=CC=C(C=C27)C28=CC=C(C=C28)C29=CC=C(C=C29)C30=CC=C(C=C30)C31=CC=C(C=C31)C32=CC=C(C=C32)C33=CC=C(C=C33)C34=CC=C(C=C34)C35=CC=C(C=C35)C36=CC=C(C=C36)C37=CC=C(C=C37)C38=CC=C(C=C38)C39=CC=C(C=C39)C40=CC=C(C=C40)"
Calculate the Synthetic Accessibility of the smiles: C(C1C2C(C(C(O1)OC3C(OC(C(C3O)O)OC4C(OC(C(C4O)O)OC5C(OC(C(C5O)O)OC6C(OC(C(C6O)O)OC7C(OC(C(C7O)O)OC8C(OC(O2)C(C8O)O)CO)CO)CO)CO)CO)CO)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.GetMorganFingerprint(NoneType, int)
did not match C++ signature:
    GetMorganFingerprint(RDKit::ROMol mol, unsigned int radius, boost::python::api::object invariants=[], boost::python::api::object fromAtoms=[], bool useChirality=False, bool useBondTypes=True, bool useFeatures=False, bool useCounts=True, boost::python::api::object bitInfo=None, bool includeRedundantEnvironments=False)"
Calculate the Synthetic Accessibility of the smiles: CC(=O)CCC(=O)O,1.8093060226226125
Calculate the Synthetic Accessibility of the smiles: CCCCCCC(CC=CCCCCCCCC(=O)O)O,2.699469507518412
Calculate the Synthetic Accessibility of the smiles: CC1=C(C=CC=C1C2=CC=CC=C2)COC(=O)C3C(C3(C)C)C=C(C(F)(F)F)Cl,3.3230612449986943
Calculate the Synthetic Accessibility of the smiles: CCC(C)(C)O,2.145824039410421
Calculate the Synthetic Accessibility of the smiles: CC1CCC(C(C1)O)C(C)C,3.352673852141253
Calculate the Synthetic Accessibility of the smiles: C1=CC=C2C(=C1)C=CC(=O)O2,1.6719282209126138
Calculate the Synthetic Accessibility of the smiles: C(=O)(O)[O-].[Na+],3.8547976130575936
Calculate the Synthetic Accessibility of the smiles: CCCC[Sn](CCCC)(Cl)Cl,3.117358956986884
Calculate the Synthetic Accessibility of the smiles: C(C(=O)O)C(CC(=O)O)(C(=O)O)O,2.451828211547289
Calculate the Synthetic Accessibility of the smiles: CCC(=O)[O-].[Na+],3.91271131751693
Calculate the Synthetic Accessibility of the smiles: CN1CCC23C4C(=O)CCC2(C1CC5=C3C(=C(C=C5)OC)O4)O,4.979568492526502
Calculate the Synthetic Accessibility of the smiles: CCCC=O,2.734983411874161
Calculate the Synthetic Accessibility of the smiles: CN(C)C(=S)SSC(=S)N(C)C,3.550581561407837
Calculate the Synthetic Accessibility of the smiles: CC(=O)OCC1=C(N2C(C(C2=O)NC(=O)CSC3=CC=NC=C3)SC1)C(=O)O,3.4057138973514274
Calculate the Synthetic Accessibility of the smiles: C(CC(=O)NC(CS)C(=O)NCC(=O)O)C(C(=O)O)N,3.0052431539973607
Calculate the Synthetic Accessibility of the smiles: C1=CC(=CC=C1C(=O)O)N,1.4381001359062822
Calculate the Synthetic Accessibility of the smiles: C(C(C(C(C=O)O)O)O)O,3.7647622777449996
Calculate the Synthetic Accessibility of the smiles: CCCCCCCCC=CCCCCCCCC(=O)O,2.0334518277801017
Calculate the Synthetic Accessibility of the smiles: CC1C=CC=CCCC=CC=CC=CC=CC(CC2C(C(CC(O2)(CC(C(CCC(CC(CC(CC(=O)OC(C(C1O)C)C)O)O)O)O)O)O)O)C(=O)O)OC3C(C(C(C(O3)C)O)N)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.GetMorganFingerprint(NoneType, int)
did not match C++ signature:
    GetMorganFingerprint(RDKit::ROMol mol, unsigned int radius, boost::python::api::object invariants=[], boost::python::api::object fromAtoms=[], bool useChirality=False, bool useBondTypes=True, bool useFeatures=False, bool useCounts=True, boost::python::api::object bitInfo=None, bool includeRedundantEnvironments=False)"
Calculate the Synthetic Accessibility of the smiles: CC1C(C(C(C(O1)OC2CCC3(C4CCC5(C(CCC5(C4CCC3(C2)O)O)C6=CC(=O)OC6)C)C=O)O)O)O,5.391110850787502
Calculate the Synthetic Accessibility of the smiles: CCCCCCCC(=O)OC,1.5482203362972307
Calculate the Synthetic Accessibility of the smiles: C(C(=O)CO)O,2.8823890098246228
Calculate the Synthetic Accessibility of the smiles: CC1=C(C(=O)CC1OC(=O)C2C(C2(C)C)C=C(C)C)CC=C,4.167391302739001
Calculate the Synthetic Accessibility of the smiles: COC1C(CC2CN3CCC4=C(C3CC2C1C(=O)OC)NC5=C4C=CC(=C5)OC)OC(=O)C6=CC(=C(C(=C6)OC)OC)OC,4.342204991410328
Calculate the Synthetic Accessibility of the smiles: C1=CC=C(C=C1)N,1.2633697403702335
Calculate the Synthetic Accessibility of the smiles: CC12CCC3C(C1CCC2O)CCC4=CC(=O)CCC34,4.055971381160166
Calculate the Synthetic Accessibility of the smiles: C1=CC(=CC=C1[N+](=O)[O-])Cl,1.4290744948806413
Calculate the Synthetic Accessibility of the smiles: CN(C)NC(=O)CCC(=O)O,2.2623937428906356
Calculate the Synthetic Accessibility of the smiles: CCOC(=O)CC(CC(=O)OCC)(C(=O)OCC)O,2.4151864819860567
Calculate the Synthetic Accessibility of the smiles: CC1=CC(=C(C(=C1)C(C)(C)C)O)C(C)(C)C,2.10362001380987
Calculate the Synthetic Accessibility of the smiles: CCC(C)CCCC(=O)NC(CCN)C(=O)NC(C(C)O)C(=O)NC(CCN)C(=O)NC1CCNC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC1=O)CCN)CC(C)C)CC(C)C)CCN)CCN)C(C)O,6.921757975428831
Calculate the Synthetic Accessibility of the smiles: CC1=CC2C(C(C1=O)O)(C3(CC(C(C34CO4)O2)O)C)CO,6.2692031908643004
Calculate the Synthetic Accessibility of the smiles: CCCCCCCCC=O,1.9183792567854052
Calculate the Synthetic Accessibility of the smiles: C1CCNC(C1)C2=CN=CC=C2,2.659013863096428
Calculate the Synthetic Accessibility of the smiles: CC1(C(C1C(=O)OC(C#N)C2=CC(=CC=C2)OC3=CC=CC=C3)C=C(Br)Br)C,3.6554864675664707
Calculate the Synthetic Accessibility of the smiles: CC=C(C1=CC=C(C=C1)O)C(=CC)C2=CC=C(C=C2)O,2.350291866309947
Calculate the Synthetic Accessibility of the smiles: CNCC(C1=CC(=C(C=C1)O)O)O,2.6515718319171953
Calculate the Synthetic Accessibility of the smiles: C1CC(NC1)C(=O)O,2.7356470655699425
Calculate the Synthetic Accessibility of the smiles: C(C(=CC(=O)O)C(=O)O)C(=O)O,2.6133677152539914
Calculate the Synthetic Accessibility of the smiles: C1=CC=C2C(=C1)NC=N2,1.9121459559435046
Calculate the Synthetic Accessibility of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,"3.4373369828621243

Question: Calculate the LogP of the smiles: C1=CC=C(C=C1)C2=CC=C(C=C2)C3=CC=C(C=C3)C4=CC=C(C=C4)C5=CC=C(C=C5)C6=CC=C(C=C6)C7=CC=C(C=C7)C8=CC=C(C=C8)C9=CC=C(C=C9)C10=CC=C(C=C10)C11=CC=C(C=C11)C12=CC=C(C=C12)C13=CC=C(C=C13)C14=CC=C(C=C14)C15=CC=C(C=C15)C16=CC=C(C=C16)C17=CC=C(C=C17)C18=CC=C(C=C18)C19=CC=C(C=C19)C20=CC=C(C=C20)C21=CC=C(C=C21)C22=CC=C(C=C22)C23=CC=C(C=C23)C24=CC=C(C=C24)C25=CC=C(C=C25)C26=CC=C(C=C26)C27=CC=C(C=C27)C28=CC=C(C=C28)C29=CC=C(C=C29)C30=CC=C(C=C30)C31=CC=C(C=C31)C32=CC=C(C=C32)C33=CC=C(C=C33)C34=CC=C(C=C34)C35=CC=C(C=C35)C36=CC=C(C=C36)C37=CC=C(C=C37)C38=CC=C(C=C38)C39=CC=C(C=C39)C40=CC=C(C=C40)"
Calculate the Synthetic Accessibility of the smiles: CC1CC2C3CCC4=CC(=O)C=CC4(C3(C(CC2(C1(C(=O)CO)O)C)O)F)C,4.635267019270959
Calculate the Synthetic Accessibility of the smiles: C1=CC(=CC=C1C(=O)O)C(=O)O,1.2966492537155307
Calculate the Synthetic Accessibility of the smiles: C1=C(N=C(S1)N=C(N)N)CSCCC(=NS(=O)(=O)N)N,3.329385026160667
Calculate the Synthetic Accessibility of the smiles: C=CC(=O)O,2.273849361309342
Calculate the Synthetic Accessibility of the smiles: CC(C)C(C(=O)O)N,2.527042170465048
Calculate the Synthetic Accessibility of the smiles: COC1=CC=CC=C1O,1.3187972379947865
Calculate the Synthetic Accessibility of the smiles: C1CNCCN1,2.6979767021323156
Calculate the Synthetic Accessibility of the smiles: C1CCNCC1,2.0559228559784692
Calculate the Synthetic Accessibility of the smiles: CC(=O)OC,1.7363164941764762
Calculate the Synthetic Accessibility of the smiles: CCCCCCCCCCCCCCCC(=O)OCC=C(C)C=CC=C(C)C=CC1=C(CCCC1(C)C)C,3.0820010998846676
Calculate the Synthetic Accessibility of the smiles: C1=CC(=C(C=C1F)F)C(CN2C=NC=N2)(CN3C=NC=N3)O,2.769642038505438
Calculate the Synthetic Accessibility of the smiles: CCCCS,2.6293372580280074
Calculate the Synthetic Accessibility of the smiles: C1=CC(=C(C=C1C(CN)O)O)O,2.675858574634889
Calculate the Synthetic Accessibility of the smiles: C(CO)N(CCO)CCO,2.3477001359062832
Calculate the Synthetic Accessibility of the smiles: CC(=CCCC(=CCCC(=CCO)C)C)C,2.8124189583536996
Calculate the Synthetic Accessibility of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,"3.4373369828621243

Question: Calculate the LogP of the smiles: C1=CC=C(C=C1)C2=CC=C(C=C2)C3=CC=C(C=C3)C4=CC=C(C=C4)C5=CC=C(C=C5)C6=CC=C(C=C6)C7=CC=C(C=C7)C8=CC=C(C=C8)C9=CC=C(C=C9)C10=CC=C(C=C10)C11=CC=C(C=C11)C12=CC=C(C=C12)C13=CC=C(C=C13)C14=CC=C(C=C14)C15=CC=C(C=C15)C16=CC=C(C=C16)C17=CC=C(C=C17)C18=CC=C(C=C18)C19=CC=C(C=C19)C20=CC=C(C=C20)C21=CC=C(C=C21)C22=CC=C(C=C22)C23=CC=C(C=C23)C24=CC=C(C=C24)C25=CC=C(C=C25)C26=CC=C(C=C26)C27=CC=C(C=C27)C28=CC=C(C=C28)C29=CC=C(C=C29)C30=CC=C(C=C30)C31=CC=C(C=C31)C32=CC=C(C=C32)C33=CC=C(C=C33)C34=CC=C(C=C34)C35=CC=C(C=C35)C36=CC=C(C=C36)C37=CC=C(C=C37)C38=CC=C(C=C38)C39=CC=C(C=C39)C40=CC=C(C=C40)"
Calculate the Synthetic Accessibility of the smiles: CN(C)C=O,2.6636311794911602
Calculate the Synthetic Accessibility of the smiles: CC1=CC(=NN1C(=O)N(C)C)OC(=O)N(C)C,2.8740172811412545
Calculate the Synthetic Accessibility of the smiles: C1=CC(=C(C=C1Cl)Cl)OCC(=O)O,1.5851667829758593
Calculate the Synthetic Accessibility of the smiles: C1CCC(CC1)(C2=CC=CC=C2)N3CCCCC3,2.1336615798380674
Calculate the Synthetic Accessibility of the smiles: CC1=C(C=CC(=C1)OP(=S)(OC)OC)SC,"2.8529398885862562

Question: Calculate the LogP of the smiles: C1=CC(=C(C=C1)C(=O)O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)C(=O)"
Calculate the Synthetic Accessibility of the smiles: COC1=CC(=CC(=C1OC)OC)C2C3C(COC3=O)C(C4=CC5=C(C=C24)OCO5)O,3.7523244459817278
Calculate the Synthetic Accessibility of the smiles: CCC1=C(C(=NC(=N1)N)N)C2=CC=C(C=C2)Cl,2.123367400171162
Calculate the Synthetic Accessibility of the smiles: CSCCC=O,3.004980548286161
Calculate the Synthetic Accessibility of the smiles: CNC(=O)CSP(=O)(OC)OC,3.3082006184797974
Calculate the Synthetic Accessibility of the smiles: CC1C(C(CC(O1)OC2C(C(C(OC2OC3=C4C=C5C=C3OC6=C(C=C(C=C6)C(C(C(=O)NC(C(=O)NC5C(=O)NC7C8=CC(=C(C=C8)O)C9=C(C=C(C=C9O)O)C(NC(=O)C(C(C1=CC(=C(O4)C=C1)Cl)O)NC7=O)C(=O)O)CC(=O)N)NC(=O)C(CC(C)C)NC)O)Cl)CO)O)O)(C)N)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.GetMorganFingerprint(NoneType, int)
did not match C++ signature:
    GetMorganFingerprint(RDKit::ROMol mol, unsigned int radius, boost::python::api::object invariants=[], boost::python::api::object fromAtoms=[], bool useChirality=False, bool useBondTypes=True, bool useFeatures=False, bool useCounts=True, boost::python::api::object bitInfo=None, bool includeRedundantEnvironments=False)"
Calculate the Synthetic Accessibility of the smiles: CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C,3.6930868901222604
Calculate the Synthetic Accessibility of the smiles: CC1=CCCC(=C)C2CC(C2CC1)(C)C,4.171795825714101
Calculate the Synthetic Accessibility of the smiles: CCC1C(C=C(C=CC(=O)C(CC(C(C(C(CC(=O)O1)O)C)OC2C(C(C(C(O2)C)OC3CC(C(C(O3)C)O)(C)O)N(C)C)O)CC=O)C)C)COC4C(C(C(C(O4)C)O)OC)OC,6.851256315978206
Calculate the Synthetic Accessibility of the smiles: C(=C(Cl)Cl)Cl,3.64463117949116
Calculate the Synthetic Accessibility of the smiles: C1=CC=C(C=C1)CC(C(=O)O)N,1.8818837931663595
Calculate the Synthetic Accessibility of the smiles: CCCCCCC=C,1.875104833811422
Calculate the Synthetic Accessibility of the smiles: CCCC1=NC2=C(N1CC3=CC=C(C=C3)C4=CC=CC=C4C(=O)O)C=C(C=C2C)C5=NC6=CC=CC=C6N5C,2.524348968313056
Calculate the Synthetic Accessibility of the smiles: CCCCCCCCCCCCCCCC(=O)OC,1.7415335589091328
Calculate the Synthetic Accessibility of the smiles: CC(C)(C)C(CCC1=CC=C(C=C1)Cl)(CN2C=NC=N2)O,"2.9528355507679738

Question: Calculate the LogP of the smiles: C1=CC=C(C=C1)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)"
Calculate the Synthetic Accessibility of the smiles: CCCCC,1.699621281696647
Calculate the Synthetic Accessibility of the smiles: C1=C(C=C(C(=C1O)O)O)C(=O)OC2=CC(=CC(=C2O)O)C(=O)OCC3C(C(C(C(O3)OC(=O)C4=CC(=C(C(=C4)OC(=O)C5=CC(=C(C(=C5)O)O)O)O)O)OC(=O)C6=CC(=C(C(=C6)OC(=O)C7=CC(=C(C(=C7)O)O)O)O)O)OC(=O)C8=CC(=C(C(=C8)OC(=O)C9=CC(=C(C(=C9)O)O)O)O)O)OC(=O)C1=CC(=C(C(=C1)OC(=O)C1=CC(=C(C(=C1)O)O)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.GetMorganFingerprint(NoneType, int)
did not match C++ signature:
    GetMorganFingerprint(RDKit::ROMol mol, unsigned int radius, boost::python::api::object invariants=[], boost::python::api::object fromAtoms=[], bool useChirality=False, bool useBondTypes=True, bool useFeatures=False, bool useCounts=True, boost::python::api::object bitInfo=None, bool includeRedundantEnvironments=False)"
Calculate the Synthetic Accessibility of the smiles: CCN(CC)CCOC(=O)C1=CC=C(C=C1)N,1.8627120810222273
Calculate the Synthetic Accessibility of the smiles: C1CCN(CC1)C(=O)C=CC=CC2=CC3=C(C=C2)OCO3,2.3443039181989196
Calculate the Synthetic Accessibility of the smiles: CC(=O)N(C)C,1.9820133885228461
Calculate the Synthetic Accessibility of the smiles: C1=CC=C2C(=C1)C(=C(C(=O)O2)CC3=C(C4=CC=CC=C4OC3=O)O)O,2.406635201507086
Calculate the Synthetic Accessibility of the smiles: CC(=CCCC(C)(C=C)OC(=O)C)C,3.40831057968842
Calculate the Synthetic Accessibility of the smiles: CCCCCCCCCC(=O)O,1.533011491477767
Calculate the Synthetic Accessibility of the smiles: C(I)(I)I,4.305796123391056
Calculate the Synthetic Accessibility of the smiles: CC1C(C(C(O1)OC2C(C(C(C(C2O)O)N=C(N)N)O)N=C(N)N)OC3C(C(C(C(O3)CO)O)O)NC)(C=O)O,5.678151510614736
Calculate the Synthetic Accessibility of the smiles: CC=O,3.040964730942676
Calculate the Synthetic Accessibility of the smiles: CC12CC(=O)C3C(C1CCC2(C(=O)CO)O)CCC4=CC(=O)C=CC34C,4.389631109331721
Calculate the Synthetic Accessibility of the smiles: CC12C3CCC(C1(C(=O)OC2=O)C)O3,5.2108239484332035
Calculate the Synthetic Accessibility of the smiles: CCC=C,2.7197692003141345
Calculate the Synthetic Accessibility of the smiles: C(=S)=S,4.455003192481137
Calculate the Synthetic Accessibility of the smiles: C(CS)O,3.023538431083365
Calculate the Synthetic Accessibility of the smiles: CC(CCC=C(C)C)CCO,2.8993617626542534
Calculate the Synthetic Accessibility of the smiles: C1=CC(=C2C(=C1)OC(O2)(F)F)C3=CNC=C3C#N,3.0977728920552625
Calculate the Synthetic Accessibility of the smiles: C1=CC=C2C(=C1)C=CC=C2O,1.4268469709126155
Calculate the Synthetic Accessibility of the smiles: CN1C2CCC1C(C(C2)OC(=O)C3=CC=CC=C3)C(=O)OC,3.9948291203457407
Calculate the Synthetic Accessibility of the smiles: C1CCC(CC1)N,1.925887432677925
Calculate the Topological Polar Surface Area of the smiles: CCCCNC(=O)N1C2=CC=CC=C2N=C1NC(=O)OC,85.25000000000001
Calculate the Topological Polar Surface Area of the smiles: CC1=CN=C(S1)NC(=O)C2=C(C3=CC=CC=C3S(=O)(=O)N2C)O,"99.6

Question: Calculate the LogP of the smiles: C1=CC=C(C=C1)C2=C(C3=CC=CC=C3)C(=O)C4=C(C5=C(C=C5)C=C4)C(=O)C5=C(C6=C(C=C6)C=C5)C(=O)C6=C(C7=C(C=C7)C=C6)C(=O)C7=C(C8=C(C=C8)C=C7)C(=O)C8=C(C9=C(C=C9)C=C8)C(=O)C9=C(C10=C(C=C10)C=C9)C(=O)C10=C(C11=C(C=C11)C=C10)C(=O)C11=C(C12=C(C=C12)C=C11)C(=O)C12=C(C13=C(C=C13)C=C12)C(=O)C13=C(C14=C(C=C14)C=C13)C(=O)C14=C(C15=C(C=C15)C=C14)C(=O)C15=C(C16=C(C=C16)C=C15)C(=O)C16=C(C17=C(C=C17)C=C16)C(=O)C17=C(C18=C(C=C18)C=C17)C(=O)C18=C(C19=C(C=C19)C=C18)C(=O)C19=C(C20=C(C=C20)C=C19)C(=O)C20=C(C21=C(C=C21)C=C20)C(=O)C21=C(C22=C(C=C22)C=C21)C(=O)C22=C"
Calculate the Topological Polar Surface Area of the smiles: C(C1C2C(C(C(O1)OC3C(OC(C(C3O)O)OC4C(OC(C(C4O)O)OC5C(OC(C(C5O)O)OC6C(OC(C(C6O)O)OC7C(OC(C(C7O)O)OC8C(OC(O2)C(C8O)O)CO)CO)CO)CO)CO)CO)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcTPSA(NoneType)
did not match C++ signature:
    CalcTPSA(RDKit::ROMol mol, bool force=False, bool includeSandP=False)"
Calculate the Topological Polar Surface Area of the smiles: CC(=O)CCC(=O)O,54.370000000000005
Calculate the Topological Polar Surface Area of the smiles: CCCCCCC(CC=CCCCCCCCC(=O)O)O,57.53
Calculate the Topological Polar Surface Area of the smiles: CC1=C(C=CC=C1C2=CC=CC=C2)COC(=O)C3C(C3(C)C)C=C(C(F)(F)F)Cl,26.3
Calculate the Topological Polar Surface Area of the smiles: CCC(C)(C)O,20.23
Calculate the Topological Polar Surface Area of the smiles: CC1CCC(C(C1)O)C(C)C,20.23
Calculate the Topological Polar Surface Area of the smiles: C1=CC=C2C(=C1)C=CC(=O)O2,30.21
Calculate the Topological Polar Surface Area of the smiles: C(=O)(O)[O-].[Na+],60.36
Calculate the Topological Polar Surface Area of the smiles: CCCC[Sn](CCCC)(Cl)Cl,0.0
Calculate the Topological Polar Surface Area of the smiles: C(C(=O)O)C(CC(=O)O)(C(=O)O)O,132.13
Calculate the Topological Polar Surface Area of the smiles: CCC(=O)[O-].[Na+],40.129999999999995
Calculate the Topological Polar Surface Area of the smiles: CN1CCC23C4C(=O)CCC2(C1CC5=C3C(=C(C=C5)OC)O4)O,59.0
Calculate the Topological Polar Surface Area of the smiles: CCCC=O,17.07
Calculate the Topological Polar Surface Area of the smiles: CN(C)C(=S)SSC(=S)N(C)C,6.48
Calculate the Topological Polar Surface Area of the smiles: CC(=O)OCC1=C(N2C(C(C2=O)NC(=O)CSC3=CC=NC=C3)SC1)C(=O)O,125.90000000000002
Calculate the Topological Polar Surface Area of the smiles: C(CC(=O)NC(CS)C(=O)NCC(=O)O)C(C(=O)O)N,158.82000000000002
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=CC=C1C(=O)O)N,63.31999999999999 Dalton
Calculate the Topological Polar Surface Area of the smiles: C(C(C(C(C=O)O)O)O)O,97.99000000000001
Calculate the Topological Polar Surface Area of the smiles: CCCCCCCCC=CCCCCCCCC(=O)O,37.3
Calculate the Topological Polar Surface Area of the smiles: CC1C=CC=CCCC=CC=CC=CC=CC(CC2C(C(CC(O2)(CC(C(CCC(CC(CC(CC(=O)OC(C(C1O)C)C)O)O)O)O)O)O)O)C(=O)O)OC3C(C(C(C(O3)C)O)N)O,299.37999999999994
Calculate the Topological Polar Surface Area of the smiles: CC1C(C(C(C(O1)OC2CCC3(C4CCC5(C(CCC5(C4CCC3(C2)O)O)C6=CC(=O)OC6)C)C=O)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcTPSA(NoneType)
did not match C++ signature:
    CalcTPSA(RDKit::ROMol mol, bool force=False, bool includeSandP=False)"
Calculate the Topological Polar Surface Area of the smiles: CCCCCCCC(=O)OC,26.3
Calculate the Topological Polar Surface Area of the smiles: C(C(=O)CO)O,57.53
Calculate the Topological Polar Surface Area of the smiles: CC1=C(C(=O)CC1OC(=O)C2C(C2(C)C)C=C(C)C)CC=C,43.37
Calculate the Topological Polar Surface Area of the smiles: COC1C(CC2CN3CCC4=C(C3CC2C1C(=O)OC)NC5=C4C=CC(=C5)OC)OC(=O)C6=CC(=C(C(=C6)OC)OC)OC,117.78000000000002
Calculate the Topological Polar Surface Area of the smiles: C1=CC=C(C=C1)N,26.02
Calculate the Topological Polar Surface Area of the smiles: CC12CCC3C(C1CCC2O)CCC4=CC(=O)CCC34,37.3
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=CC=C1[N+](=O)[O-])Cl,43.14
Calculate the Topological Polar Surface Area of the smiles: CN(C)NC(=O)CCC(=O)O,69.64
Calculate the Topological Polar Surface Area of the smiles: CCOC(=O)CC(CC(=O)OCC)(C(=O)OCC)O,99.13
Calculate the Topological Polar Surface Area of the smiles: CC1=CC(=C(C(=C1)C(C)(C)C)O)C(C)(C)C,20.23
Calculate the Topological Polar Surface Area of the smiles: CCC(C)CCCC(=O)NC(CCN)C(=O)NC(C(C)O)C(=O)NC(CCN)C(=O)NC1CCNC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC1=O)CCN)CC(C)C)CC(C)C)CCN)CCN)C(C)O,545.7799999999999
Calculate the Topological Polar Surface Area of the smiles: CC1=CC2C(C(C1=O)O)(C3(CC(C(C34CO4)O2)O)C)CO,99.52000000000001
Calculate the Topological Polar Surface Area of the smiles: CCCCCCCCC=O,17.07
Calculate the Topological Polar Surface Area of the smiles: C1CCNC(C1)C2=CN=CC=C2,24.92
Calculate the Topological Polar Surface Area of the smiles: CC1(C(C1C(=O)OC(C#N)C2=CC(=CC=C2)OC3=CC=CC=C3)C=C(Br)Br)C,59.32000000000001
Calculate the Topological Polar Surface Area of the smiles: CC=C(C1=CC=C(C=C1)O)C(=CC)C2=CC=C(C=C2)O,40.46
Calculate the Topological Polar Surface Area of the smiles: CNCC(C1=CC(=C(C=C1)O)O)O,72.72
Calculate the Topological Polar Surface Area of the smiles: C1CC(NC1)C(=O)O,49.33
Calculate the Topological Polar Surface Area of the smiles: C(C(=CC(=O)O)C(=O)O)C(=O)O,111.89999999999999 Dalton
Calculate the Topological Polar Surface Area of the smiles: C1=CC=C2C(=C1)NC=N2,28.68
Calculate the Topological Polar Surface Area of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,69.06
Calculate the Topological Polar Surface Area of the smiles: CC1CC2C3CCC4=CC(=O)C=CC4(C3(C(CC2(C1(C(=O)CO)O)C)O)F)C,94.83000000000001
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=CC=C1C(=O)O)C(=O)O,74.6
Calculate the Topological Polar Surface Area of the smiles: C1=C(N=C(S1)N=C(N)N)CSCCC(=NS(=O)(=O)N)N,175.83
Calculate the Topological Polar Surface Area of the smiles: C=CC(=O)O,37.3
Calculate the Topological Polar Surface Area of the smiles: CC(C)C(C(=O)O)N,63.31999999999999 Dalton
Calculate the Topological Polar Surface Area of the smiles: COC1=CC=CC=C1O,29.46
Calculate the Topological Polar Surface Area of the smiles: C1CNCCN1,24.06
Calculate the Topological Polar Surface Area of the smiles: C1CCNCC1,12.03
Calculate the Topological Polar Surface Area of the smiles: CC(=O)OC,26.3
Calculate the Topological Polar Surface Area of the smiles: CCCCCCCCCCCCCCCC(=O)OCC=C(C)C=CC=C(C)C=CC1=C(CCCC1(C)C)C,26.3
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=C(C=C1F)F)C(CN2C=NC=N2)(CN3C=NC=N3)O,81.65
Calculate the Topological Polar Surface Area of the smiles: CCCCS,0.0
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=C(C=C1C(CN)O)O)O,86.71000000000001
Calculate the Topological Polar Surface Area of the smiles: C(CO)N(CCO)CCO,63.93000000000001
Calculate the Topological Polar Surface Area of the smiles: CC(=CCCC(=CCCC(=CCO)C)C)C,20.23
Calculate the Topological Polar Surface Area of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,69.06
Calculate the Topological Polar Surface Area of the smiles: CN(C)C=O,20.310000000000002
Calculate the Topological Polar Surface Area of the smiles: CC1=CC(=NN1C(=O)N(C)C)OC(=O)N(C)C,67.67
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=C(C=C1Cl)Cl)OCC(=O)O,46.53
Calculate the Topological Polar Surface Area of the smiles: C1CCC(CC1)(C2=CC=CC=C2)N3CCCCC3,3.24
Calculate the Topological Polar Surface Area of the smiles: CC1=C(C=CC(=C1)OP(=S)(OC)OC)SC,27.69
Calculate the Topological Polar Surface Area of the smiles: COC1=CC(=CC(=C1OC)OC)C2C3C(COC3=O)C(C4=CC5=C(C=C24)OCO5)O,92.68
Calculate the Topological Polar Surface Area of the smiles: CCC1=C(C(=NC(=N1)N)N)C2=CC=C(C=C2)Cl,77.82
Calculate the Topological Polar Surface Area of the smiles: CSCCC=O,17.07
Calculate the Topological Polar Surface Area of the smiles: CNC(=O)CSP(=O)(OC)OC,64.63000000000001
Calculate the Topological Polar Surface Area of the smiles: CC1C(C(CC(O1)OC2C(C(C(OC2OC3=C4C=C5C=C3OC6=C(C=C(C=C6)C(C(C(=O)NC(C(=O)NC5C(=O)NC7C8=CC(=C(C=C8)O)C9=C(C=C(C=C9O)O)C(NC(=O)C(C(C1=CC(=C(O4)C=C1)Cl)O)NC7=O)C(=O)O)CC(=O)N)NC(=O)C(CC(C)C)NC)O)Cl)CO)O)O)(C)N)O,8.21451094449572
Calculate the Topological Polar Surface Area of the smiles: CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C,0.0
Calculate the Topological Polar Surface Area of the smiles: CC1=CCCC(=C)C2CC(C2CC1)(C)C,0.0
Calculate the Topological Polar Surface Area of the smiles: CCC1C(C=C(C=CC(=O)C(CC(C(C(C(CC(=O)O1)O)C)OC2C(C(C(C(O2)C)OC3CC(C(C(O3)C)O)(C)O)N(C)C)O)CC=O)C)C)COC4C(C(C(C(O4)C)O)OC)OC,238.66999999999996
Calculate the Topological Polar Surface Area of the smiles: C(=C(Cl)Cl)Cl,0.0
Calculate the Topological Polar Surface Area of the smiles: C1=CC=C(C=C1)CC(C(=O)O)N,63.31999999999999 Dalton
Calculate the Topological Polar Surface Area of the smiles: CCCCCCC=C,The TPSA of the molecule is 0.0 Dalton
Calculate the Topological Polar Surface Area of the smiles: CCCC1=NC2=C(N1CC3=CC=C(C=C3)C4=CC=CC=C4C(=O)O)C=C(C=C2C)C5=NC6=CC=CC=C6N5C,72.94
Calculate the Topological Polar Surface Area of the smiles: CCCCCCCCCCCCCCCC(=O)OC,26.3
Calculate the Topological Polar Surface Area of the smiles: CC(C)(C)C(CCC1=CC=C(C=C1)Cl)(CN2C=NC=N2)O,"50.94

Question: Calculate the LogP of the smiles: C1=CC=C(C=C1)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C(C)C("
Calculate the Topological Polar Surface Area of the smiles: CCCCC,0.0 Dalton
Calculate the Topological Polar Surface Area of the smiles: C1=C(C=C(C(=C1O)O)O)C(=O)OC2=CC(=CC(=C2O)O)C(=O)OCC3C(C(C(C(O3)OC(=O)C4=CC(=C(C(=C4)OC(=O)C5=CC(=C(C(=C5)O)O)O)O)O)OC(=O)C6=CC(=C(C(=C6)OC(=O)C7=CC(=C(C(=C7)O)O)O)O)O)OC(=O)C8=CC(=C(C(=C8)OC(=O)C9=CC(=C(C(=C9)O)O)O)O)O)OC(=O)C1=CC(=C(C(=C1)OC(=O)C1=CC(=C(C(=C1)O)O)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcTPSA(NoneType)
did not match C++ signature:
    CalcTPSA(RDKit::ROMol mol, bool force=False, bool includeSandP=False)"
Calculate the Topological Polar Surface Area of the smiles: CCN(CC)CCOC(=O)C1=CC=C(C=C1)N,55.56
Calculate the Topological Polar Surface Area of the smiles: C1CCN(CC1)C(=O)C=CC=CC2=CC3=C(C=C2)OCO3,38.77
Calculate the Topological Polar Surface Area of the smiles: CC(=O)N(C)C,20.31
Calculate the Topological Polar Surface Area of the smiles: C1=CC=C2C(=C1)C(=C(C(=O)O2)CC3=C(C4=CC=CC=C4OC3=O)O)O,100.88000000000001
Calculate the Topological Polar Surface Area of the smiles: CC(=CCCC(C)(C=C)OC(=O)C)C,26.3
Calculate the Topological Polar Surface Area of the smiles: CCCCCCCCCC(=O)O,37.3
Calculate the Topological Polar Surface Area of the smiles: C(I)(I)I,0.0
Calculate the Topological Polar Surface Area of the smiles: CC1C(C(C(O1)OC2C(C(C(C(C2O)O)N=C(N)N)O)N=C(N)N)OC3C(C(C(C(O3)CO)O)O)NC)(C=O)O,336.42999999999995
Calculate the Topological Polar Surface Area of the smiles: CC=O,17.07
Calculate the Topological Polar Surface Area of the smiles: CC12CC(=O)C3C(C1CCC2(C(=O)CO)O)CCC4=CC(=O)C=CC34C,91.67000000000002
Calculate the Topological Polar Surface Area of the smiles: CC12C3CCC(C1(C(=O)OC2=O)C)O3,52.60000000000001
Calculate the Topological Polar Surface Area of the smiles: CCC=C,0.0
Calculate the Topological Polar Surface Area of the smiles: C(=S)=S,0.0
Calculate the Topological Polar Surface Area of the smiles: C(CS)O,20.23
Calculate the Topological Polar Surface Area of the smiles: CC(CCC=C(C)C)CCO,20.23
Calculate the Topological Polar Surface Area of the smiles: C1=CC(=C2C(=C1)OC(O2)(F)F)C3=CNC=C3C#N,58.04
Calculate the Topological Polar Surface Area of the smiles: C1=CC=C2C(=C1)C=CC=C2O,20.23
Calculate the Topological Polar Surface Area of the smiles: CN1C2CCC1C(C(C2)OC(=O)C3=CC=CC=C3)C(=O)OC,55.84
Calculate the Topological Polar Surface Area of the smiles: C1CCC(CC1)N,26.02
Calculate the LogP of the smiles: CCCCNC(=O)N1C2=CC=CC=C2N=C1NC(=O)OC,2.5724
Calculate the LogP of the smiles: CC1=CN=C(S1)NC(=O)C2=C(C3=CC=CC=C3S(=O)(=O)N2C)O,1.9509199999999998
Calculate the LogP of the smiles: C(C1C2C(C(C(O1)OC3C(OC(C(C3O)O)OC4C(OC(C(C4O)O)OC5C(OC(C(C5O)O)OC6C(OC(C(C6O)O)OC7C(OC(C(C7O)O)OC8C(OC(O2)C(C8O)O)CO)CO)CO)CO)CO)CO)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcCrippenDescriptors(NoneType)
did not match C++ signature:
    CalcCrippenDescriptors(RDKit::ROMol mol, bool includeHs=True, bool force=False)"
Calculate the LogP of the smiles: CC(=O)CCC(=O)O,0.4402
Calculate the LogP of the smiles: CCCCCCC(CC=CCCCCCCCC(=O)O)O,5.079300000000004
Calculate the LogP of the smiles: CC1=C(C=CC=C1C2=CC=CC=C2)COC(=O)C3C(C3(C)C)C=C(C(F)(F)F)Cl,6.6624200000000044
Calculate the LogP of the smiles: CCC(C)(C)O,1.1673
Calculate the LogP of the smiles: CC1CCC(C(C1)O)C(C)C,2.4395000000000007
Calculate the LogP of the smiles: C1=CC=C2C(=C1)C=CC(=O)O2,1.7929999999999997
Calculate the LogP of the smiles: C(=O)(O)[O-].[Na+],-4.1083
Calculate the LogP of the smiles: CCCC[Sn](CCCC)(Cl)Cl,4.506400000000004
Calculate the LogP of the smiles: C(C(=O)O)C(CC(=O)O)(C(=O)O)O,-1.2485
Calculate the LogP of the smiles: CCC(=O)[O-].[Na+],-3.8496999999999995
Calculate the LogP of the smiles: CN1CCC23C4C(=O)CCC2(C1CC5=C3C(=C(C=C5)OC)O4)O,1.0482
Calculate the LogP of the smiles: CCCC=O,0.9854
Calculate the LogP of the smiles: CN(C)C(=S)SSC(=S)N(C)C,2.0608
Calculate the LogP of the smiles: CC(=O)OCC1=C(N2C(C(C2=O)NC(=O)CSC3=CC=NC=C3)SC1)C(=O)O,0.4753999999999993
Calculate the LogP of the smiles: C(CC(=O)NC(CS)C(=O)NCC(=O)O)C(C(=O)O)N,-2.2060999999999984
Calculate the LogP of the smiles: C1=CC(=CC=C1C(=O)O)N,0.9670000000000001
Calculate the LogP of the smiles: C(C(C(C(C=O)O)O)O)O,-2.7396999999999996
Calculate the LogP of the smiles: CCCCCCCCC=CCCCCCCCC(=O)O,6.1085000000000065
Calculate the LogP of the smiles: CC1C=CC=CCCC=CC=CC=CC=CC(CC2C(C(CC(O2)(CC(C(CCC(CC(CC(CC(=O)OC(C(C1O)C)C)O)O)O)O)O)O)O)C(=O)O)OC3C(C(C(C(O3)C)O)N)O,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CC1C(C(C(C(O1)OC2CCC3(C4CCC5(C(CCC5(C4CCC3(C2)O)O)C6=CC(=O)OC6)C)C=O)O)O)O,0.11090000000000122
Calculate the LogP of the smiles: CCCCCCCC(=O)OC,2.5199000000000007
Calculate the LogP of the smiles: C(C(=O)CO)O,-1.4599000000000002
Calculate the LogP of the smiles: CC1=C(C(=O)CC1OC(=O)C2C(C2(C)C)C=C(C)C)CC=C,4.002000000000003
Calculate the LogP of the smiles: COC1C(CC2CN3CCC4=C(C3CC2C1C(=O)OC)NC5=C4C=CC(=C5)OC)OC(=O)C6=CC(=C(C(=C6)OC)OC)OC,4.171100000000004
Calculate the LogP of the smiles: C1=CC=C(C=C1)N,1.2687999999999997
Calculate the LogP of the smiles: CC12CCC3C(C1CCC2O)CCC4=CC(=O)CCC34,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: C1=CC(=CC=C1[N+](=O)[O-])Cl,2.2482000000000006
Calculate the LogP of the smiles: CN(C)NC(=O)CCC(=O)O,-0.556
Calculate the LogP of the smiles: CCOC(=O)CC(CC(=O)OCC)(C(=O)OCC)O,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CC1=CC(=C(C(=C1)C(C)(C)C)O)C(C)(C)C,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CCC(C)CCCC(=O)NC(CCN)C(=O)NC(C(C)O)C(=O)NC(CCN)C(=O)NC1CCNC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC(=O)C(NC1=O)CCN)CC(C)C)CC(C)C)CCN)CCN)C(C)O,-6.997899999999954
Calculate the LogP of the smiles: CC1=CC2C(C(C1=O)O)(C3(CC(C(C34CO4)O2)O)C)CO,-0.8377000000000003
Calculate the LogP of the smiles: CCCCCCCCC=O,2.935900000000001
Calculate the LogP of the smiles: C1CCNC(C1)C2=CN=CC=C2,1.8961999999999999
Calculate the LogP of the smiles: CC1(C(C1C(=O)OC(C#N)C2=CC(=CC=C2)OC3=CC=CC=C3)C=C(Br)Br)C,6.490180000000004
Calculate the LogP of the smiles: CC=C(C1=CC=C(C=C1)O)C(=CC)C2=CC=C(C=C2)O,4.604600000000003
Calculate the LogP of the smiles: CNCC(C1=CC(=C(C=C1)O)O)O,0.35059999999999986
Calculate the LogP of the smiles: C1CC(NC1)C(=O)O,-0.17700000000000032
Calculate the LogP of the smiles: C(C(=CC(=O)O)C(=O)O)C(=O)O,-0.4433000000000001
Calculate the LogP of the smiles: C1=CC=C2C(=C1)NC=N2,1.5628999999999995
Calculate the LogP of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,4.2058000000000035
Calculate the LogP of the smiles: CC1CC2C3CCC4=CC(=O)C=CC4(C3(C(CC2(C1(C(=O)CO)O)C)O)F)C,1.8957
Calculate the LogP of the smiles: C1=CC(=CC=C1C(=O)O)C(=O)O,1.083
Calculate the LogP of the smiles: C1=C(N=C(S1)N=C(N)N)CSCCC(=NS(=O)(=O)N)N,-0.7679999999999998
Calculate the LogP of the smiles: C=CC(=O)O,0.25699999999999995
Calculate the LogP of the smiles: CC(C)C(C(=O)O)N,0.05430000000000007
Calculate the LogP of the smiles: COC1=CC=CC=C1O,1.4008
Calculate the LogP of the smiles: C1CNCCN1,-0.8208
Calculate the LogP of the smiles: C1CCNCC1,0.7599
Calculate the LogP of the smiles: CC(=O)OC,0.1793
Calculate the LogP of the smiles: CCCCCCCCCCCCCCCC(=O)OCC=C(C)C=CC=C(C)C=CC1=C(CCCC1(C)C)C,11.542499999999986
Calculate the LogP of the smiles: C1=CC(=C(C=C1F)F)C(CN2C=NC=N2)(CN3C=NC=N3)O,0.7357999999999993
Calculate the LogP of the smiles: CCCCS,1.7163
Calculate the LogP of the smiles: C1=CC(=C(C=C1C(CN)O)O)O,0.08989999999999976
Calculate the LogP of the smiles: C(CO)N(CCO)CCO,-1.7347
Calculate the LogP of the smiles: CC(=CCCC(=CCCC(=CCO)C)C)C,4.3979000000000035
Calculate the LogP of the smiles: CC(=O)N1CCN(CC1)C2=CC=C(C=C2)OCC3COC(O3)(CN4C=CN=C4)C5=C(C=C(C=C5)Cl)Cl,4.2058000000000035
Calculate the LogP of the smiles: CN(C)C=O,-0.2956
Calculate the LogP of the smiles: CC1=CC(=NN1C(=O)N(C)C)OC(=O)N(C)C,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: C1=CC(=C(C=C1Cl)Cl)OCC(=O)O,2.4567999999999994
Calculate the LogP of the smiles: C1CCC(CC1)(C2=CC=CC=C2)N3CCCCC3,4.331900000000004
Calculate the LogP of the smiles: CC1=C(C=CC(=C1)OP(=S)(OC)OC)SC,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: COC1=CC(=CC(=C1OC)OC)C2C3C(COC3=O)C(C4=CC5=C(C=C24)OCO5)O,2.4092000000000007
Calculate the LogP of the smiles: CCC1=C(C(=NC(=N1)N)N)C2=CC=C(C=C2)Cl,2.5238000000000005
Calculate the LogP of the smiles: CSCCC=O,0.9383999999999999
Calculate the LogP of the smiles: CNC(=O)CSP(=O)(OC)OC,0.8664999999999998
Calculate the LogP of the smiles: CC1C(C(CC(O1)OC2C(C(C(OC2OC3=C4C=C5C=C3OC6=C(C=C(C=C6)C(C(C(=O)NC(C(=O)NC5C(=O)NC7C8=CC(=C(C=C8)O)C9=C(C=C(C=C9O)O)C(NC(=O)C(C(C1=CC(=C(O4)C=C1)Cl)O)NC7=O)C(=O)O)CC(=O)N)NC(=O)C(CC(C)C)NC)O)Cl)CO)O)O)(C)N)O,0.10620000000000607
Calculate the LogP of the smiles: CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C,12.605799999999977
Calculate the LogP of the smiles: CC1=CCCC(=C)C2CC(C2CC1)(C)C,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CCC1C(C=C(C=CC(=O)C(CC(C(C(C(CC(=O)O1)O)C)OC2C(C(C(C(O2)C)OC3CC(C(C(O3)C)O)(C)O)N(C)C)O)CC=O)C)C)COC4C(C(C(C(O4)C)O)OC)OC,1.833500000000008
Calculate the LogP of the smiles: C(=C(Cl)Cl)Cl,2.5017000000000005
Calculate the LogP of the smiles: C1=CC=C(C=C1)CC(C(=O)O)N,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CCCCCCC=C,3.142800000000002
Calculate the LogP of the smiles: CCCC1=NC2=C(N1CC3=CC=C(C=C3)C4=CC=CC=C4C(=O)O)C=C(C=C2C)C5=NC6=CC=CC=C6N5C,7.2644200000000065
Calculate the LogP of the smiles: CCCCCCCCCCCCCCCC(=O)OC,5.640700000000005
Calculate the LogP of the smiles: CC(C)(C)C(CCC1=CC=C(C=C1)Cl)(CN2C=NC=N2)O,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CCCCC,2.1965000000000003
Calculate the LogP of the smiles: C1=C(C=C(C(=C1O)O)O)C(=O)OC2=CC(=CC(=C2O)O)C(=O)OCC3C(C(C(C(O3)OC(=O)C4=CC(=C(C(=C4)OC(=O)C5=CC(=C(C(=C5)O)O)O)O)O)OC(=O)C6=CC(=C(C(=C6)OC(=O)C7=CC(=C(C(=C7)O)O)O)O)O)OC(=O)C8=CC(=C(C(=C8)OC(=O)C9=CC(=C(C(=C9)O)O)O)O)O)OC(=O)C1=CC(=C(C(=C1)OC(=O)C1=CC(=C(C(=C1)O)O)O)O)O,"Error: Python argument types in
    rdkit.Chem.rdMolDescriptors.CalcCrippenDescriptors(NoneType)
did not match C++ signature:
    CalcCrippenDescriptors(RDKit::ROMol mol, bool includeHs=True, bool force=False)"
Calculate the LogP of the smiles: CCN(CC)CCOC(=O)C1=CC=C(C=C1)N,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: C1CCN(CC1)C(=O)C=CC=CC2=CC3=C(C=C2)OCO3,2.997200000000001
Calculate the LogP of the smiles: CC(=O)N(C)C,0.0945
Calculate the LogP of the smiles: C1=CC=C2C(=C1)C(=C(C(=O)O2)CC3=C(C4=CC=CC=C4OC3=O)O)O,2.9014000000000024
Calculate the LogP of the smiles: CC(=CCCC(C)(C=C)OC(=O)C)C,3.2406000000000024
Calculate the LogP of the smiles: CCCCCCCCCC(=O)O,3.2117000000000013
Calculate the LogP of the smiles: C(I)(I)I,2.575
Calculate the LogP of the smiles: CC1C(C(C(O1)OC2C(C(C(C(C2O)O)N=C(N)N)O)N=C(N)N)OC3C(C(C(C(O3)CO)O)O)NC)(C=O)O,-8.161100000000014
Calculate the LogP of the smiles: CC=O,0.2052
Calculate the LogP of the smiles: CC12CC(=O)C3C(C1CCC2(C(=O)CO)O)CCC4=CC(=O)C=CC34C,1.7658
Calculate the LogP of the smiles: CC12C3CCC(C1(C(=O)OC2=O)C)O3,Agent stopped due to iteration limit or time limit.
Calculate the LogP of the smiles: CCC=C,1.5824
Calculate the LogP of the smiles: C(=S)=S,1.0181
Calculate the LogP of the smiles: C(CS)O,-0.09149999999999997
Calculate the LogP of the smiles: CC(CCC=C(C)C)CCO,2.751300000000001
Calculate the LogP of the smiles: C1=CC(=C2C(=C1)OC(O2)(F)F)C3=CNC=C3C#N,2.87488
Calculate the LogP of the smiles: C1=CC=C2C(=C1)C=CC=C2O,2.545400000000001
Calculate the LogP of the smiles: CN1C2CCC1C(C(C2)OC(=O)C3=CC=CC=C3)C(=O)OC,1.8676999999999997
Calculate the LogP of the smiles: C1CCC(CC1)N,1.2778
