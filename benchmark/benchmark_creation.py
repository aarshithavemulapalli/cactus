"""Method script for generating some aspects of the chem benchmark."""

from pathlib import Path

import pandas as pd

HERE = Path(__file__).parent.resolve()
COMPOUND = HERE.joinpath("compound_list.csv")


def generate_permutations(templates, descriptors, molecules):
    """
    Generate questions by filling in templates with information from a DataFrame of compounds.

    Parameters
    ----------
    templates : list of str
        List of string templates with placeholders for attribute and compound.
    descriptors : list of str
        List of descriptors to be used in the generated questions.
    molecules : pandas.DataFrame
        DataFrame containing information about compounds with columns 'cid', 'canonicalsmiles',
        'cmpdname', and 'inchikey'.

    Returns
    -------
    list of str
        List of strings representing questions generated by filling in templates.

    """
    questions = []
    for template in templates:
        for descriptor in descriptors:
            for _, row in molecules.iterrows():
                compound_cid = row["cid"]
                compound_smiles = row["canonicalsmiles"]
                compound_name = row["cmpdname"]
                compound_inchikey = row["inchikey"]

                # Conditionally fill in the template based on placeholder
                if "cid" in template:
                    questions.append(template.format(attribute=descriptor, compound=compound_cid))
                elif "smiles" in template:
                    questions.append(
                        template.format(attribute=descriptor, compound=compound_smiles)
                    )
                elif "inchikey" in template:
                    questions.append(
                        template.format(attribute=descriptor, compound=compound_inchikey)
                    )
                else:
                    questions.append(template.format(attribute=descriptor, compound=compound_name))

    return questions


def generate_qualitative_questions(molecules):
    """Generate qualitative questions for the given molecules."""
    templates = [
        "Is the smiles: {compound} , druglike ?",
        "Does the smiles: {compound} , trigger the PAINS filter ?",
        "Does the smiles: {compound}, trigger the Brenk filter ?",
        "Is the smiles: {compound}, blood brain barrier permeant ?",
        "Calculate the Gastrointestinal absorption of the smiles: {compound} ?",
    ]
    descriptors = ["Qualitative"]
    return generate_permutations(templates, descriptors, molecules)


def generate_quantitative_questions(molecules):
    """Generate quantitative questions for the given molecules."""
    templates = [
        # "Calculate the {attribute} of cid: {compound}",
        "Calculate the {attribute} of the smiles: {compound}",
        # "Calculate the {attribute} of the inchikey: {compound}",
        # "Calculate the {attribute} of {compound}",
    ]
    descriptors = [
        "Molecular Weight",
        "QED",
        "Synthetic Accessibility",
        "Topological Polar Surface Area",
        "LogP",
    ]
    return generate_permutations(templates, descriptors, molecules)


def main():
    """Run the benchmark creation script for 100 randomly selected PubChem compounds."""
    pubchem_molecules = pd.read_csv(COMPOUND)
    sampled = pubchem_molecules.sample(n=100)

    qualitative_questions = generate_qualitative_questions(sampled)
    quantitative_questions = generate_quantitative_questions(sampled)

    # Create DataFrames
    qualitative_df = pd.DataFrame(qualitative_questions, columns=["Question"])
    quantitative_df = pd.DataFrame(quantitative_questions, columns=["Question"])

    # Combined DataFrame
    combined_df = pd.concat([qualitative_df, quantitative_df], ignore_index=True)

    # Save DataFrames to CSV
    qualitative_df.to_csv("SingleStepQuestionList_Qualitative.csv", index=False)
    quantitative_df.to_csv("SingleStepQuestionList_Quantitative.csv", index=False)
    combined_df.to_csv("SingleStepQuestionList_Combined.csv", index=False)


if __name__ == "__main__":
    main()
